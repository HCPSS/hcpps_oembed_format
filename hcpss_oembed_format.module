<?php

/**
 * Implementation of hook_entity_insert
 */
function hcpss_oembed_format_entity_insert($entity, $type) {
  if ($type == 'file' && $entity->filemime == 'image/oembed') {
    hcpss_oembed_format_set_entity_title($entity);
  }
}

/**
 * Implementation of hook_entity_presave
 */
function hcpss_oembed_format_entity_presave($entity, $type) {
  if ($type == 'file' && $entity->filemime == 'image/oembed') {
    hcpss_oembed_format_set_entity_title($entity);
  }
}

/**
 * Implementation of hook_form_alter
 */
function hcpss_oembed_format_form_alter(&$form, &$form_state, $form_id) {
  // Quick fail for forms we are not looking for
  if ($form_id != 'file_entity_edit' && $form_id != 'media_internet_add_upload') {
    return;
  }

  // Quick fail for forms where there is no filename value
  if (empty($form['filename']['#default_value'])) {
    return;
  }

  // Quick fail for forms that do not have the entity we are looking for
  if (empty($form['#entity']) || !property_exists($form['#entity'], 'filemime') || $form['#entity']->filemime != 'image/oembed') {
    return;
  }

  // Remove the provider name for the oembed media
  $provider_prefix = hcpss_oembed_format_get_provider_prefix($form['#entity']);
  if (strpos($form['filename']['#default_value'], $provider_prefix) === 0) {
    // The provider prefix is present on this form. Let's hide it from the user
    // since we don't want him editing it. We can remove it safely because it
    // will be added back automatically when the entity is saved.
    $filename = $form['filename']['#default_value'];
    $filename = substr_replace($filename, '', 0, strlen($provider_prefix));
    $form['filename']['#default_value'] = $filename;
  }
}

/**
 * Get the oembed provider name given a file
 *
 * @param unknown $file
 * @return string
 */
function hcpss_oembed_format_get_provider_name_from_file($file) {
  $url      = urldecode(str_replace('oembed://', '', $file->uri));
  $handler  = new MediaInternetOEmbedHandler($url);
  $info     = $handler->getOEmbed();

  return $info['provider_name'];
}

/**
 * Set the entity title by prefixing the oembed provider
 * 
 * @param stdClass $entity
 */
function hcpss_oembed_format_set_entity_title($entity) {
  if(!property_exists($entity, 'fid')){
    // We need a file id
    return;
  }

  // Get the provider info
  $file           = file_load($entity->fid);
  $provider_prefix  = hcpss_oembed_format_get_provider_prefix($file);
  
  // Prefix the filename with the provider name
  if (strpos($entity->filename, $provider_prefix) !== 0) {
    $entity->filename = $provider_prefix . $entity->filename;
  }
}

/**
 * Take a file and return the provider prefix
 *  
 * @param stdClass $file
 * @return string
 */
function hcpss_oembed_format_get_provider_prefix($file) {
  $provider_name  = hcpss_oembed_format_get_provider_name_from_file($file);
  $provider_format = variable_get('hcpss_oembed_format_format', '[provider] - ');
  $prefix = str_replace('[provider]', $provider_name, $provider_format);
  
  return $prefix;
}
